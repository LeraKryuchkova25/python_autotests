{"name": "test_negative_login[2-lerochka@ya.ru-Iloveqa1-exp_alert1]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=129.0.6668.58); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF65277FDA5+29557]\n\t(No symbol) [0x00007FF6526F2240]\n\t(No symbol) [0x00007FF6525AB6EA]\n\t(No symbol) [0x00007FF6525BE1CB]\n\t(No symbol) [0x00007FF6525B2F14]\n\t(No symbol) [0x00007FF6525B0D94]\n\t(No symbol) [0x00007FF6525B4637]\n\t(No symbol) [0x00007FF6525B46F0]\n\t(No symbol) [0x00007FF6525F95AB]\n\t(No symbol) [0x00007FF6526274FA]\n\t(No symbol) [0x00007FF6525F3006]\n\t(No symbol) [0x00007FF652627710]\n\t(No symbol) [0x00007FF6526488A3]\n\t(No symbol) [0x00007FF6526272A3]\n\t(No symbol) [0x00007FF6525F12DF]\n\t(No symbol) [0x00007FF6525F2451]\n\tGetHandleVerifier [0x00007FF652AADCBD+3363469]\n\tGetHandleVerifier [0x00007FF652AF9B47+3674391]\n\tGetHandleVerifier [0x00007FF652AEEAEB+3629243]\n\tGetHandleVerifier [0x00007FF65283FC66+815670]\n\t(No symbol) [0x00007FF6526FD6EF]\n\t(No symbol) [0x00007FF6526F92B4]\n\t(No symbol) [0x00007FF6526F9450]\n\t(No symbol) [0x00007FF6526E81FF]\n\tBaseThreadInitThunk [0x00007FFA2462257D+29]\n\tRtlUserThreadStart [0x00007FFA2608AF28+40]", "trace": "case = '2', email = 'lerochka@ya.ru', password = 'Iloveqa1'\nexp_alert = ['', 'Неверные логин или пароль']\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"08b76ce0688b725e4df6e99c30ccbe6e\")>\n\n    @pytest.mark.parametrize('case, email, password, exp_alert', CASES)\n    def test_negative_login(case, email, password, exp_alert, browser):\n        \"\"\"\n        POC-2. Negative cases for login\n        \"\"\"\n        def check_alerts(browser):\n            alerts = browser.find_elements(by=By.CSS_SELECTOR, value='[class*=\"auth__error\"]')\n            return [alert.text for alert in alerts]\n    \n        browser.get(url=Cfg.URL)\n    \n        email_input = WebDriverWait(browser, timeout=10, poll_frequency=2).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, '[class*=\"f_email\"]')))\n        email_input.click()\n        email_input.send_keys(email)\n    \n        password_input = browser.find_element(by=By.CSS_SELECTOR, value='[class*=\"f_pass\"]')\n        password_input.click()\n        password_input.send_keys(password)\n    \n        enter_button = browser.find_element(by=By.CSS_SELECTOR, value='[class*=\"send_auth\"]')\n        enter_button.click()\n    \n>       assert wait_for(lambda: check_alerts(browser) == exp_alert)(), 'Unexpected alert message'\n\ntests\\test_pokemon_web.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\utils.py:16: in decorator\n    func_result = func(*args, **kwargs)\ntests\\test_pokemon_web.py:68: in <lambda>\n    assert wait_for(lambda: check_alerts(browser) == exp_alert)(), 'Unexpected alert message'\ntests\\test_pokemon_web.py:52: in check_alerts\n    return [alert.text for alert in alerts]\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000155ACF0EB70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF6526E81FF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA2462257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA2608AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=129.0.6668.58); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF65277FDA5+29557]\nE       \t(No symbol) [0x00007FF6526F2240]\nE       \t(No symbol) [0x00007FF6525AB6EA]\nE       \t(No symbol) [0x00007FF6525BE1CB]\nE       \t(No symbol) [0x00007FF6525B2F14]\nE       \t(No symbol) [0x00007FF6525B0D94]\nE       \t(No symbol) [0x00007FF6525B4637]\nE       \t(No symbol) [0x00007FF6525B46F0]\nE       \t(No symbol) [0x00007FF6525F95AB]\nE       \t(No symbol) [0x00007FF6526274FA]\nE       \t(No symbol) [0x00007FF6525F3006]\nE       \t(No symbol) [0x00007FF652627710]\nE       \t(No symbol) [0x00007FF6526488A3]\nE       \t(No symbol) [0x00007FF6526272A3]\nE       \t(No symbol) [0x00007FF6525F12DF]\nE       \t(No symbol) [0x00007FF6525F2451]\nE       \tGetHandleVerifier [0x00007FF652AADCBD+3363469]\nE       \tGetHandleVerifier [0x00007FF652AF9B47+3674391]\nE       \tGetHandleVerifier [0x00007FF652AEEAEB+3629243]\nE       \tGetHandleVerifier [0x00007FF65283FC66+815670]\nE       \t(No symbol) [0x00007FF6526FD6EF]\nE       \t(No symbol) [0x00007FF6526F92B4]\nE       \t(No symbol) [0x00007FF6526F9450]\nE       \t(No symbol) [0x00007FF6526E81FF]\nE       \tBaseThreadInitThunk [0x00007FFA2462257D+29]\nE       \tRtlUserThreadStart [0x00007FFA2608AF28+40]\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "description": "\n    POC-2. Negative cases for login\n    ", "parameters": [{"name": "case", "value": "'2'"}, {"name": "email", "value": "'lerochka@ya.ru'"}, {"name": "password", "value": "'Iloveqa1'"}, {"name": "exp_alert", "value": "['', 'Неверные логин или пароль']"}], "start": 1727008035655, "stop": 1727008038487, "uuid": "01b93dc9-1022-4695-a3f5-dfe1c584ea77", "historyId": "ca3d6d08da8375ddc2a315f9428795c8", "testCaseId": "e830b7d613b9487ace92423eab2bd791", "fullName": "tests.test_pokemon_web#test_negative_login", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_pokemon_web"}, {"name": "host", "value": "Lerka-PC"}, {"name": "thread", "value": "13180-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_pokemon_web"}]}